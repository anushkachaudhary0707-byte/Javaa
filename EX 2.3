import java.util.*;
import java.util.stream.*;
import java.util.function.*;
import java.util.Comparator;

public class LambdaDemo {

    // Part A: Employee class and methods
    static class Employee {
        String name;
        int age;
        double salary;

        public Employee(String name, int age, double salary) {
            this.name = name;
            this.age = age;
            this.salary = salary;
        }

        @Override
        public String toString() {
            return String.format("Employee{name='%s', age=%d, salary=%.2f}", name, age, salary);
        }
    }

    // Part B: Student class
    static class Student {
        String name;
        double marks;

        public Student(String name, double marks) {
            this.name = name;
            this.marks = marks;
        }

        @Override
        public String toString() {
            return String.format("Student{name='%s', marks=%.2f}", name, marks);
        }
    }

    // Part C: Product class
    static class Product {
        String name;
        double price;
        String category;

        public Product(String name, double price, String category) {
            this.name = name;
            this.price = price;
            this.category = category;
        }

        @Override
        public String toString() {
            return String.format("Product{name='%s', price=%.2f, category='%s'}", name, price, category);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        List<Employee> employees = new ArrayList<>(Arrays.asList(
            new Employee("Alice", 30, 70000),
            new Employee("Bob", 24, 50000),
            new Employee("Charlie", 28, 60000),
            new Employee("Diana", 35, 90000)
        ));

        List<Student> students = new ArrayList<>(Arrays.asList(
            new Student("John", 80),
            new Student("Jane", 70),
            new Student("Mike", 85),
            new Student("Sara", 90),
            new Student("Paul", 60)
        ));

        List<Product> products = new ArrayList<>(Arrays.asList(
            new Product("Laptop", 1200, "Electronics"),
            new Product("Headphones", 150, "Electronics"),
            new Product("Coffee Maker", 80, "Home Appliances"),
            new Product("Blender", 60, "Home Appliances"),
            new Product("Sneakers", 100, "Footwear"),
            new Product("Boots", 200, "Footwear")
        ));

        while (true) {
            System.out.println("\n--- MENU ---");
            System.out.println("1. Sort Employees");
            System.out.println("2. Filter and Sort Students");
            System.out.println("3. Product Stream Operations");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            int choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    sortEmployeesMenu(employees, sc);
                    break;
                case 2:
                    filterAndSortStudents(students);
                    break;
                case 3:
                    productStreamOperations(products);
                    break;
                case 4:
                    System.out.println("Exiting... Bye!");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    // Part A: Sorting Employees
    private static void sortEmployeesMenu(List<Employee> employees, Scanner sc) {
        while (true) {
            System.out.println("\nSort Employees by:");
            System.out.println("1. Name (Alphabetical)");
            System.out.println("2. Age (Ascending)");
            System.out.println("3. Salary (Descending)");
            System.out.println("4. Back to main menu");
            System.out.print("Choose an option: ");

            int option = sc.nextInt();
            sc.nextLine();

            switch (option) {
                case 1:
                    employees.sort((e1, e2) -> e1.name.compareToIgnoreCase(e2.name));
                    System.out.println("\nEmployees sorted by Name:");
                    employees.forEach(System.out::println);
                    break;
                case 2:
                    employees.sort(Comparator.comparingInt(e -> e.age));
                    System.out.println("\nEmployees sorted by Age:");
                    employees.forEach(System.out::println);
                    break;
                case 3:
                    employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
                    System.out.println("\nEmployees sorted by Salary (Descending):");
                    employees.forEach(System.out::println);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    // Part B: Filtering and Sorting Students
    private static void filterAndSortStudents(List<Student> students) {
        System.out.println("\nStudents with marks > 75%, sorted by marks:");

        List<String> filteredSortedNames = students.stream()
            .filter(s -> s.marks > 75)
            .sorted(Comparator.comparingDouble(s -> s.marks))
            .map(s -> s.name)
            .collect(Collectors.toList());

        filteredSortedNames.forEach(System.out::println);
    }

    // Part C: Stream Operations on Products
    private static void productStreamOperations(List<Product> products) {
        System.out.println("\nGrouping products by category:");
        Map<String, List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));

        grouped.forEach((category, prods) -> {
            System.out.println(category + ": " + prods);
        });

        System.out.println("\nMost expensive product in each category:");
        Map<String, Optional<Product>> maxPriceByCategory = products.stream()
            .collect(Collectors.groupingBy(p -> p.category,
                    Collectors.maxBy(Comparator.comparingDouble(p -> p.price))));

        maxPriceByCategory.forEach((category, productOpt) -> {
            productOpt.ifPresent(product -> System.out.println(category + ": " + product));
        });

        System.out.println("\nAverage price of all products:");
        double avgPrice = products.stream()
            .collect(Collectors.averagingDouble(p -> p.price));
        System.out.printf("Average price: %.2f\n", avgPrice);
    }
}
