import java.io.*;
import java.util.*;

class Main {

    // Part a: Sum of Integers Using Autoboxing and Unboxing
    public static void sumOfIntegers() {
        Scanner scanner = new Scanner(System.in);
        ArrayList<Integer> numbers = new ArrayList<>();

        System.out.println("Enter integers separated by spaces:");
        String input = scanner.nextLine();
        String[] inputs = input.trim().split("\\s+");

        for (String s : inputs) {
            try {
                Integer num = Integer.parseInt(s);
                numbers.add(num);
            } catch (NumberFormatException e) {
                System.out.println("Invalid integer input: " + s);
            }
        }

        int sum = 0;
        for (Integer i : numbers) {
            sum += i;
        }

        System.out.println("Sum of entered integers: " + sum);
    }

    // Part b: Serialization and Deserialization of a Student Object
    public static void serializeDeserializeStudent() {
        Student student = new Student(101, "Alice", 89.5f);
        String filename = "student.ser";

        // Serialization
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(student);
            System.out.println("Student object serialized to " + filename);
        } catch (IOException e) {
            System.out.println("Error during serialization: " + e.getMessage());
            return;
        }

        // Deserialization
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            Student deserializedStudent = (Student) ois.readObject();
            System.out.println("Deserialized Student Object:");
            System.out.println(deserializedStudent);
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error during deserialization: " + e.getMessage());
        }
    }

    // Part c: Menu-Based Employee Management System Using File Handling
    public static void employeeManagementSystem() {
        Scanner scanner = new Scanner(System.in);
        String filename = "employees.txt";

        while (true) {
            System.out.println("\nEmployee Management System");
            System.out.println("1. Add an Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");

            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    addEmployee(scanner, filename);
                    break;
                case "2":
                    displayEmployees(filename);
                    break;
                case "3":
                    System.out.println("Exiting application.");
                    return;
                default:
                    System.out.println("Invalid choice! Please enter 1, 2, or 3.");
            }
        }
    }

    private static void addEmployee(Scanner scanner, String filename) {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename, true))) {
            System.out.print("Enter Employee Name: ");
            String name = scanner.nextLine();

            System.out.print("Enter Employee ID: ");
            String id = scanner.nextLine();

            System.out.print("Enter Designation: ");
            String designation = scanner.nextLine();

            System.out.print("Enter Salary: ");
            String salaryStr = scanner.nextLine();
            double salary;
            try {
                salary = Double.parseDouble(salaryStr);
            } catch (NumberFormatException e) {
                System.out.println("Invalid salary input. Employee not added.");
                return;
            }

            String record = name + "," + id + "," + designation + "," + salary;
            bw.write(record);
            bw.newLine();

            System.out.println("Employee added successfully.");

        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }

    private static void displayEmployees(String filename) {
        File file = new File(filename);
        if (!file.exists()) {
            System.out.println("No employee records found.");
            return;
        }

        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            System.out.println("\nEmployee Records:");
            System.out.println("-------------------------------------------------");
            System.out.printf("%-20s %-10s %-15s %-10s\n", "Name", "ID", "Designation", "Salary");
            System.out.println("-------------------------------------------------");

            boolean found = false;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 4) {
                    String name = parts[0];
                    String id = parts[1];
                    String designation = parts[2];
                    String salary = parts[3];

                    System.out.printf("%-20s %-10s %-15s %-10s\n", name, id, designation, salary);
                    found = true;
                }
            }

            if (!found) {
                System.out.println("No employee records to display.");
            }

        } catch (IOException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nSelect Part to Run:");
            System.out.println("1. Sum of Integers Using Autoboxing and Unboxing");
            System.out.println("2. Serialization and Deserialization of a Student Object");
            System.out.println("3. Employee Management System");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    sumOfIntegers();
                    break;
                case "2":
                    serializeDeserializeStudent();
                    break;
                case "3":
                    employeeManagementSystem();
                    break;
                case "4":
                    System.out.println("Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice. Please select 1, 2, 3, or 4.");
            }
        }
    }
}

// Serializable Student class for Part b
class Student implements Serializable {
    private static final long serialVersionUID = 1L;

    private int studentID;
    private String name;
    private float grade;

    public Student(int studentID, String name, float grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    // Override toString for nice output
    @Override
    public String toString() {
        return "Student ID: " + studentID + "\nName: " + name + "\nGrade: " + grade;
    }
}
